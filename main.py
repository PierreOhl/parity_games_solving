import games
import progress_measures
import executions
import trees
import lifting_algorithms
import random as rand


def generate_random(size, average_deg):
    invproba = size * size // average_deg
    edges=[]    
    for i in range(size):
        for j in range(size):
            for p in range(size):
                r = rand.randrange(invproba)
                if(r==0):
                    edges.append((i,j,p))
    eve=[i<size//2 for i in range(size)]
    rep = games.parity_game(size, size, edges, eve)
    return(rep)

g=generate_random(200, 3)
print(g.edges)

'''
# a trivial game won by Adam
edges=[(0,1,2), (1,0,2), (1,1,1)]
g=games.parity_game(2, 2, edges, [0,1])
'''

'''
# a trivial game won by Eve 
edges=[(0,1,2), (1,0,2), (1,1,1), (0,0,2)]
g=games.parity_game(2, 2, edges, [0,1])
'''
'''
# a trivial game which has a sink
edges=[]
g=games.parity_game(2, 2, edges, [1,1])
'''

'''
# a game of size 20
edges=[(0, 9, 8), (0, 13, 0), (0, 16, 2), (0, 18, 17), (1, 4, 13), (1, 12, 1), (2, 4, 6), (3, 7, 14), (3, 18, 0), (3, 19, 1), (4, 0, 1), (4, 1, 12), (4, 1, 17), (4, 2, 10), (4, 5, 17), (4, 12, 17), (5, 0, 4), (5, 0, 8), (5, 9, 7), (6, 4, 15), (6, 4, 16), (6, 8, 2), (7, 18, 11), (8, 7, 8), (12, 13, 3), (12, 13, 6), (13, 8, 14), (13, 19, 11), (14, 2, 3), (14, 2, 11), (14, 14, 0), (15, 8, 4), (15, 11, 14), (18, 11, 17), (19, 10, 10), (19, 13, 16)]
g=games.parity_game(20, 20, edges, [i<10 for i in range(20)])
'''
'''
# a game of size 5
edges=[(0, 2, 0), (0, 2, 3), (0, 4, 2), (1, 1, 2), (1, 1, 4), (1, 4, 0), (1, 4, 3), (2, 0, 3), (3, 2, 3), (3, 3, 0), (3, 3, 2), (3, 3, 4), (3, 4, 3)]
g=games.parity_game(5, 5, edges, [i<2 for i in range(20)])
'''

'''
# a hard instance of size 50
edges=[(0, 8, 19), (0, 24, 44), (0, 31, 29), (0, 40, 28), (1, 39, 36), (2, 34, 41), (3, 8, 36), (3, 18, 40), (4, 32, 41), (5, 9, 24), (5, 16, 39), (5, 18, 30), (5, 19, 10), (6, 5, 5), (6, 42, 39), (7, 3, 2), (7, 9, 19), (7, 20, 30), (7, 31, 11), (7, 45, 14), (7, 47, 44), (8, 37, 15), (9, 8, 41), (9, 33, 46), (10, 9, 12), (10, 11, 42), (11, 20, 40), (11, 30, 15), (12, 10, 42), (13, 6, 11), (14, 3, 15), (15, 2, 26), (15, 43, 32), (16, 17, 17), (16, 25, 0), (17, 31, 1), (17, 49, 45), (18, 41, 4), (18, 45, 5), (19, 16, 18), (20, 0, 42), (20, 4, 21), (21, 8, 24), (21, 23, 28), (21, 26, 40), (21, 31, 42), (22, 16, 45), (22, 21, 34), (23, 1, 33), (23, 17, 5), (24, 13, 40), (25, 33, 26), (25, 38, 2), (27, 8, 38), (27, 26, 42), (27, 33, 12), (27, 38, 39), (27, 39, 35), (28, 26, 27), (28, 30, 10), (28, 41, 12), (28, 46, 16), (29, 6, 37), (30, 17, 46), (30, 36, 26), (31, 15, 6), (31, 17, 45), (31, 38, 6), (31, 40, 1), (31, 41, 31), (32, 21, 40), (32, 23, 40), (32, 34, 27), (33, 48, 33), (34, 6, 42), (34, 8, 36), (34, 26, 16), (34, 31, 28), (35, 9, 29), (35, 19, 24), (37, 40, 2), (38, 31, 21), (38, 41, 29), (39, 10, 31), (40, 28, 41), (41, 35, 21), (41, 41, 2), (41, 43, 45), (42, 2, 6), (42, 7, 15), (42, 17, 11), (42, 18, 33), (43, 6, 20), (43, 11, 31), (44, 3, 39), (45, 0, 13), (46, 1, 32), (46, 6, 35), (46, 7, 13), (46, 10, 10), (46, 48, 19), (47, 15, 14), (47, 16, 37), (48, 34, 0), (48, 46, 3), (48, 49, 2), (49, 25, 14)]
g=games.parity_game(50,50, edges, [i<25 for i in range(50)])
'''
'''
#an instance where some algorithms fail
edges=[(0, 4, 6), (1, 11, 10), (1, 16, 17), (1, 17, 8), (2, 1, 12), (2, 11, 4), (2, 17, 15), (2, 17, 19), (3, 2, 11), (3, 4, 0), (3, 19, 19), (4, 4, 5), (4, 6, 16), (4, 8, 0), (4, 9, 2), (5, 2, 13), (5, 14, 13), (6, 8, 16), (6, 11, 17), (6, 18, 0), (7, 15, 6), (7, 18, 19), (8, 1, 10), (8, 2, 13), (8, 4, 5), (8, 4, 12), (8, 5, 18), (8, 12, 12), (8, 18, 0), (8, 18, 9), (9, 0, 16), (9, 5, 19), (9, 14, 2), (9, 18, 18), (9, 19, 9), (10, 5, 4), (10, 9, 10), (10, 9, 18), (10, 11, 4), (10, 18, 0), (11, 2, 17), (11, 8, 12), (11, 11, 16), (12, 12, 7), (13, 13, 4), (14, 7, 3), (14, 8, 6), (14, 11, 17), (14, 14, 0), (16, 16, 19), (17, 0, 1), (17, 3, 13), (17, 4, 2), (17, 12, 1), (18, 8, 4), (18, 18, 10), (18, 19, 18), (19, 2, 11), (19, 2, 12), (19, 4, 6), (19, 7, 12)]
g=games.parity_game(20, 20, edges, [i<10 for i in range(20)])
'''
'''
#to debug zielonka
edges=[(1, 0, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (1, 3, 0), (1, 3, 3), (2, 1, 0), (2, 2, 2), (2, 3, 0), (2, 3, 1), (3, 0, 2), (3, 0, 3), (3, 1, 1), (3, 1, 2)]
g=games.parity_game(4, 4, edges, [1,1,0,0])
'''

exec = executions.execution(g, 10)
exec.symmetric_lifting_strong()
exec.printinfos()

'''
exec = executions.execution(g, 10)
exec.asymmetric_lifting(0)
exec.printinfos()

exec = executions.execution(g, 10)
exec.asymmetric_lifting(1)
exec.printinfos()
'''

exec = executions.execution(g, 10)
exec.zielonka_algorithm()
exec.printinfos()

